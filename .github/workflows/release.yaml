name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version you intend to release (eg x.y.z)
  pull_request:
    types: [ closed ]
  push:
    branches:
      - 'release/**'
    tags:
      - v*

env:
  VERSION: ${{ github.event.inputs.version }}
  RELEASE_MINISIGN_PRIVATE_KEY: "${{ secrets.RELEASE_PRIVATE_KEY }}"
  RELEASE_MINISIGN_PRIVATE_KEY_PASSWORD: "${{ secrets.RELEASE_PRIVATE_KEY_PASSWORD }}"

jobs:
  token:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.generate.outputs.token }}
    steps:
      - name: Generate token
        id: generate
        run: |
          echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT
  #        uses: tibdex/github-app-token@v1
#        with:
#          app_id: 251311
#          private_key: ${{ secrets.TOKEN_EXCHANGE_GH_APP_PRIVATE_KEY }}
#          repository: ${{ github.repository }}
#          permissions: >-
#            {"contents": "write", "pull_requests": "write"}
  prepare:
    runs-on: ubuntu-latest
    needs: token
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{needs.token.outputs.value}}
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.19.x'
      - name: Install Buf
        run: make installbuf
      - name: Update Buf Version
        run: make updateversion
      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@ad43dccb4d726ca8514126628bec209b8354b6dd
        with:
          add-paths: .
          commit-message: "Update version to v${{env.VERSION}}"
          branch: release/v${{env.VERSION}}
          delete-branch: true
          title: "Release v${{env.VERSION}}"
          body: |
            Release prepared for ${{env.VERSION}}
            
            Reminder: Update the changelog
          token: ${{needs.token.outputs.value}}
      - name: Slack Notification
        run: |
          jq --null-input '{ text: "BufCLI Release v${{env.VERSION}} has started: ${{ steps.cpr.outputs.pull-request-url }}" }' \
          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_RELEASE_NOTIFICATION_WEBHOOK }}'
  verify:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref_name, 'release') }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Check changelog is modified
        run: |
          files=`(git fetch origin main:main) && (git diff --name-only main)`
          for file in $files; do
            if [ "$file" = "CHANGELOG.md" ]; then
              exit 0
            fi
          done
          ::error title=FAIL::CHANGELOG has not been updated
          exit 1
  tag:
    runs-on: ubuntu-latest
    needs: token
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release') }}
    steps:
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{github.head_ref}}
          echo "VERSION=${VERSION##*/}" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{needs.token.outputs.value}}
          fetch-depth: 0
      - name: Tag Release
        run: |
          git config --global user.password ${{needs.token.outputs.value}}
          git tag -d ${{env.VERSION}} 2> /dev/null || echo 'local ref does not exist'
          git push origin :${{env.VERSION}} 2> /dev/null || echo 'remote ref does not exist'
          git tag ${{env.VERSION}}
          git push origin ${{env.VERSION}}
  perform:
    runs-on: ubuntu-latest
    needs: token
    if: ${{ github.event_name == 'push' && startsWith(github.ref_name, 'v') && github.ref_type == 'tag'}}
    steps:
      - name: Set VERSION variable from tag
        run: |
          echo "VERSION=${{github.ref_name}}" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{needs.token.outputs.value}}
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.19.x'
      - name: Create assets
        run: make bufrelease
      - name: Set FILES variable from tag
        run: |
          echo "FILES=$(find ${{github.workspace}}/.build/release/buf/assets -type f)" >> $GITHUB_ENV
      - name: Release
        id: ghr
        uses: softprops/action-gh-release@v1
        with:
          token: ${{needs.token.outputs.value}}
          generate_release_notes: true # change to the CHANGELOG somehow
          files: |
            ${{env.FILES}}
      - name: Slack Notification
        run: |
          jq --null-input '{ text: "BufCLI Release v${{env.VERSION}} is complete: ${{ steps.ghr.outputs.url }}" }' \
          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_RELEASE_NOTIFICATION_WEBHOOK }}'
